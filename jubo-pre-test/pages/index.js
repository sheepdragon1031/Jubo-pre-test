import { useEffect, useState } from "react"
import Head from "next/head"

import styles from "../styles/Home.module.css"
import Appbar from "../components/appbar"
import List from "@mui/material/List"
import ListItem from "@mui/material/ListItem"
import ListItemText from "@mui/material/ListItemText"
import ListItemAvatar from "@mui/material/ListItemAvatar"
import Avatar from "@mui/material/Avatar"
import Dialog, { DialogProps } from "@mui/material/Dialog"
import ListItemButton from "@mui/material/ListItemButton"
import Card from "@mui/material/Card"
import CardHeader from "@mui/material/CardHeader"
import CardContent from "@mui/material/CardContent"
import IconButton, { IconButtonProps } from "@mui/material/IconButton"
import CardActions from "@mui/material/CardActions"
import { CardActionArea } from "@mui/material"
import Typography from "@mui/material/Typography"
import Box from "@mui/material/Box"
import Grid from "@mui/material/Grid"
import TextField from "@mui/material/TextField"
import Container from "@mui/material/Container"
import Stack from "@mui/material/Stack"
import Button from "@mui/material/Button"
import DeleteIcon from "@mui/icons-material/Delete"
import EditIcon from "@mui/icons-material/Edit"
import LibraryAddIcon from "@mui/icons-material/LibraryAdd"
import SendIcon from "@mui/icons-material/Send"
import { getList, getItem, postItem, DeleItem, putItem } from "../plugins/api"

export default function Home() {
  const [getListPatient, setListPatient] = useState({ data: [] })
  const [inputMessage, setInputMessage] = useState("")
  const [inputMessageEdit, setInputMessageEdit] = useState("")
  const [isOpenDialog, setOpenDialog] = useState(false)
  const [isOpenCard, setOpenCard] = useState(false)
  const [isOpenEdit, setOpenEdit] = useState(false)
  const [getPatient, setPatient] = useState({
    data: {
      attributes: {
        orders: {
          data: []
        }
      }
    }
  })

  const fetchData = async () => {
    // const res = await axios.get(
    //   `${process.env.NEXT_PUBLIC_API_URL}/api/patients`
    // )
    const res = await getList("patients")
    setListPatient(res.data)
  }
  const handlePostMessage = async () => {
    await postItem("orders", {
      message: inputMessage,
      patient: getPatient.data.id
    }).then((res) => {
      if (res.status === 200) {
        handleClickOpen({ id: getPatient.data.id })
        setInputMessage("")
      }
    })
  }
  const handlePutMessage = async () => {
    await putItem("orders", isOpenEdit, {
      message: inputMessageEdit
    }).then((res) => {
      if (res.status === 200) {
        handleClickOpen({ id: getPatient.data.id })
        setOpenEdit(false)
        setInputMessage("")
      }
    })
  }
  const handleDeleteMessage = async (id) => {
    await DeleItem("orders", id).then((res) => {
      if (res.status === 200) {
        handleClickOpen({ id: getPatient.data.id })
      }
    })
  }
  const handleClickOpen = async ({ id }) => {
    const res = await getItem("patients", id)
    setPatient(res.data)
    setOpenDialog(true)
  }

  const handleClose = () => {
    setOpenDialog(false)
  }
  useEffect(() => {
    fetchData()
  }, [])
  return (
    <div className={styles.container}>
      <Appbar />
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Dialog open={isOpenDialog} onClose={handleClose} fullWidth scroll="body">
        <Container>
          <Box
            sx={{
              display: "flex",
              alignItems: "flex-end",
              flexDirection: "column",
              py: 2
            }}
          >
            <IconButton
              size="large"
              aria-label="LibraryAddIcon"
              onClick={() => {
                setOpenCard(!isOpenCard)
              }}
            >
              <LibraryAddIcon />
            </IconButton>
          </Box>
          {isOpenCard ? (
            <Card>
              <CardHeader title="New Order Message" />
              <CardContent>
                <TextField
                  fullWidth
                  id="Message"
                  label="Message"
                  variant="outlined"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  rows={4}
                  multiline
                />
              </CardContent>
              <cardActions sx={{ m: 3 }}>
                <Stack
                  direction="row"
                  justifyContent="flex-end"
                  alignItems="center"
                  spacing={2}
                >
                  <Button variant="text" onClick={handlePostMessage}>
                    Send
                  </Button>
                </Stack>
              </cardActions>
            </Card>
          ) : (
            <> </>
          )}

          {getPatient.data.attributes.orders.data.map((item) => {
            return (
              <Card key={`Card-${item.id}`} sx={{ my: 3 }}>
                <CardHeader
                  avatar={
                    <Avatar aria-label="recipe">
                      {getPatient.data.attributes.name.slice(0, 1)}
                    </Avatar>
                  }
                  title={getPatient.data.attributes.name}
                  subheader={item.attributes.createdAt}
                />
                <CardContent>
                  {isOpenEdit === item.id ? (
                    <div>
                      <TextField
                        value={inputMessageEdit}
                        variant="outlined"
                        rows={4}
                        onChange={(e) => setInputMessageEdit(e.target.value)}
                        multiline
                        fullWidth
                      />
                      <Stack
                        sx={{
                          py: 1
                        }}
                        direction="row"
                        justifyContent="flex-end"
                        alignItems="center"
                        spacing={2}
                      >
                        <IconButton onClick={handlePutMessage}>
                          <SendIcon />
                        </IconButton>
                      </Stack>
                    </div>
                  ) : (
                    <Typography variant="body2" color="text.secondary">
                      {item.attributes.message}
                    </Typography>
                  )}
                </CardContent>
                <CardActions disableSpacing>
                  <IconButton
                    aria-label="EditIcon"
                    onClick={() => {
                      setOpenEdit(isOpenEdit === item.id ? false : item.id)
                      setInputMessageEdit(item.attributes.message)
                    }}
                  >
                    <EditIcon />
                  </IconButton>
                  <IconButton aria-label="DeleteIcon">
                    <DeleteIcon
                      onClick={() => {
                        handleDeleteMessage(item.id)
                      }}
                    />
                  </IconButton>
                </CardActions>
              </Card>
            )
          })}
        </Container>
      </Dialog>
      <main className={styles.main}>
        <List
          sx={{ width: "100%", maxWidth: 720, bgcolor: "background.paper" }}
        >
          {getListPatient.data.map((item) => {
            return (
              <ListItem key={`list-${item.id}`}>
                <ListItemButton
                  onClick={() => handleClickOpen({ id: item.id })}
                >
                  <ListItemAvatar>
                    <Avatar>
                      <Avatar>{item.attributes.name.slice(0, 1)}</Avatar>
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText>{item.attributes.name}</ListItemText>
                </ListItemButton>
              </ListItem>
            )
          })}
        </List>
      </main>
    </div>
  )
}
